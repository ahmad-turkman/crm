package com.crm.dao;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.crm.Utility;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

@Component
public class OppDao {

	public String getAll() throws SQLException {
		Utility.connect();
		String query = "SELECT A.*, B.company_name AS customer, B.is_customer, C.name AS product, "
					+ "(SELECT CONCAT(sa.id, ',', MAX(percentage)) FROM probabilities p LEFT JOIN sales_steps sa ON sa.id = p.step_id WHERE opp_id = A.id) AS probability "
					+ "FROM opportunities A "
					+ "LEFT JOIN customers B ON B.id = A.customer_id "
					+ "LEFT JOIN products C ON C.id = A.product_id ";

		PreparedStatement ps = Utility.getConn().prepareStatement(query);
		ResultSet rs = ps.executeQuery();
		JsonArray out = new JsonArray();

		while (rs.next()) {

			JsonObject temp = new JsonObject();
			
			temp.addProperty("id", rs.getString("id"));
			temp.addProperty("description", rs.getString("description"));
			temp.addProperty("customer_id", rs.getString("customer_id"));
			temp.addProperty("product_id", rs.getString("product_id"));
			temp.addProperty("status", rs.getString("status"));
			temp.addProperty("creation_date", rs.getString("creation_date"));
			temp.addProperty("customer", rs.getString("customer"));
			temp.addProperty("is_customer", rs.getString("is_customer"));
			temp.addProperty("product", rs.getString("product"));
			
			if(rs.getString("probability") != null) {
				String[] proba = rs.getString("probability").split(",");
				 
				temp.addProperty("step_id", proba[0]);
				temp.addProperty("probability", proba[1]);
			}
			out.add(temp);
		}
		Utility.disconnect();
		return out.toString();
	}

	public String add(Map<String, String> hmap) throws SQLException, IOException {
		Utility.connect();

		String query1 = "INSERT INTO opportunities (description, account_id, customer_id, product_id, status, creation_date) VALUES(?, ?, ?, ?, ?, STR_TO_DATE(?,'%d-%m-%Y'))";

		PreparedStatement ps1 = Utility.getConn().prepareStatement(query1);

		ps1.setString(1, hmap.get("description"));
		ps1.setString(2, hmap.get("account_id"));
		ps1.setString(3, hmap.get("customer_id"));
		ps1.setString(4, hmap.get("product_id"));
		ps1.setString(5, hmap.get("status"));
		ps1.setString(6, hmap.get("creation_date"));

		ps1.executeUpdate();

		String getId = "SELECT MAX(id) as id FROM opportunities ";
		PreparedStatement getIDps = Utility.getConn().prepareStatement(getId);
		ResultSet Idrs = getIDps.executeQuery();
		Idrs.next();

		String query2 = "INSERT INTO probabilities (account_id, opp_id, step_id, creation_date) VALUES(?, ?, ?, NOW())";

		PreparedStatement ps2 = Utility.getConn().prepareStatement(query2);

		ps2.setString(1, hmap.get("account_id"));
		ps2.setString(2, Idrs.getString("id"));
		ps2.setString(3, hmap.get("step_id"));

		ps2.executeUpdate();

		String getRow = "SELECT A.*, B.company_name AS customer, B.is_customer, C.name AS product, "
				+ "(SELECT MAX(percentage) FROM probabilities p LEFT JOIN sales_steps sa ON sa.id = p.step_id WHERE opp_id = A.id) AS probability "
				+ "FROM opportunities A " + "LEFT JOIN customers B ON B.id = A.customer_id "
				+ "LEFT JOIN products C ON C.id = A.product_id " + " WHERE A.id = (SELECT MAX(id) FROM opportunities)";
		PreparedStatement ps = Utility.getConn().prepareStatement(getRow);
		ResultSet rs = ps.executeQuery();

		JsonObject temp = new JsonObject();

		if (rs.next()) {

			temp.addProperty("id", rs.getString("id"));
			temp.addProperty("description", rs.getString("description"));
			temp.addProperty("customer_id", rs.getString("customer_id"));
			temp.addProperty("product_id", rs.getString("product_id"));
			temp.addProperty("status", rs.getString("status"));
			temp.addProperty("creation_date", rs.getString("creation_date"));
			temp.addProperty("customer", rs.getString("customer"));
			temp.addProperty("is_customer", rs.getString("is_customer"));
			temp.addProperty("product", rs.getString("product"));
			temp.addProperty("probability", rs.getString("probability"));
		}

		return temp.toString();

	}

	public String update(Map<String, String> hmap) throws SQLException {
		Utility.connect();

		String query = "UPDATE opportunities SET description = ?, customer_id = ?, product_id = ?, status = ?, creation_date = STR_TO_DATE(?,'%d-%m-%Y') WHERE id = ?";

		PreparedStatement ps = Utility.getConn().prepareStatement(query);

		ps.setString(1, hmap.get("description"));
		ps.setString(2, hmap.get("customer_id"));
		ps.setString(3, hmap.get("product_id"));
		ps.setString(4, hmap.get("status"));
		ps.setString(5, hmap.get("creation_date"));
		ps.setString(6, hmap.get("id"));

		ps.executeUpdate();

		String query2 = "INSERT INTO probabilities (account_id, opp_id, step_id, creation_date) VALUES(?, ?, ?, NOW())";

		PreparedStatement ps2 = Utility.getConn().prepareStatement(query2);

		ps2.setString(1, hmap.get("account_id"));
		ps2.setString(2, hmap.get("id"));
		ps2.setString(3, hmap.get("step_id"));

		ps2.executeUpdate();

		String getId = "SELECT A.*, B.company_name AS customer, B.is_customer, C.name AS product, "
				+ "(SELECT MAX(percentage) FROM probabilities p LEFT JOIN sales_steps sa ON sa.id = p.step_id WHERE opp_id = A.id) AS probability "
				+ "FROM opportunities A " + "LEFT JOIN customers B ON B.id = A.customer_id "
				+ "LEFT JOIN products C ON C.id = A.product_id " + " WHERE A.id = ?";
		PreparedStatement ps1 = Utility.getConn().prepareStatement(getId);

		ps1.setString(1, hmap.get("id"));

		ResultSet rs = ps1.executeQuery();

		JsonObject temp = new JsonObject();

		if (rs.next()) {

			temp.addProperty("id", rs.getString("id"));
			temp.addProperty("description", rs.getString("description"));
			temp.addProperty("customer_id", rs.getString("customer_id"));
			temp.addProperty("product_id", rs.getString("product_id"));
			temp.addProperty("status", rs.getString("status"));
			temp.addProperty("creation_date", rs.getString("creation_date"));
			temp.addProperty("customer", rs.getString("customer"));
			temp.addProperty("is_customer", rs.getString("is_customer"));
			temp.addProperty("product", rs.getString("product"));
			temp.addProperty("probability", rs.getString("probability"));
		}
		return temp.toString();

	}

	public String delete(Map<String, String> hmap) throws SQLException {

		Utility.connect();

		String query1 = "SELECT A.*, B.company_name AS customer, B.is_customer, C.name AS product, "
				+ "(SELECT MAX(percentage) FROM probabilities p LEFT JOIN sales_steps sa ON sa.id = p.step_id WHERE opp_id = A.id) AS probability "
				+ "FROM opportunities A " + "LEFT JOIN customers B ON B.id = A.customer_id "
				+ "LEFT JOIN products C ON C.id = A.product_id " + " WHERE A.id = ?";

		PreparedStatement ps1 = Utility.getConn().prepareStatement(query1);

		ps1.setString(1, hmap.get("id"));

		ResultSet rs = ps1.executeQuery();

		JsonObject temp = new JsonObject();

		if (rs.next()) {

			temp.addProperty("id", rs.getString("id"));
			temp.addProperty("description", rs.getString("description"));
			temp.addProperty("customer_id", rs.getString("customer_id"));
			temp.addProperty("product_id", rs.getString("product_id"));
			temp.addProperty("status", rs.getString("status"));
			temp.addProperty("creation_date", rs.getString("creation_date"));
			temp.addProperty("customer", rs.getString("customer"));
			temp.addProperty("is_customer", rs.getString("is_customer"));
			temp.addProperty("product", rs.getString("product"));
			temp.addProperty("probability", rs.getString("probability"));
		}

		String query = "DELETE FROM opportunities WHERE id=?";
		PreparedStatement ps = Utility.getConn().prepareStatement(query);
		ps.setString(1, hmap.get("id"));

		int i = ps.executeUpdate();

		Utility.disconnect();

		if (i < 1)
			throw new SQLException();

		return temp.toString();
	}

}
